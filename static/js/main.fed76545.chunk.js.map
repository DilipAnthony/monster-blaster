{"version":3,"sources":["components/card-componenst/card-component.jsx","components/card-list-componensts/card-list-componensts.jsx","components/search-component/search-component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","height","width","mons","name","email","CardList","monster","map","index","key","Search","type","placeholder","onChange","handleChange","App","state","searchBox","fetch","then","response","json","users","setState","this","filteredComponent","filter","toLowerCase","includes","toLocaleLowerCase","e","target","value","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"yUAWeA,G,YARK,SAAAC,GAAK,OACzB,yBAAKC,UAAU,kBACf,yBAAKC,IAAI,SAASC,IAAI,gDAAgDC,OAAO,QAAQC,MAAM,UAC3F,4BAAKL,EAAMM,KAAKC,MAChB,2BAAIP,EAAMM,KAAKE,UCIAC,G,MAPS,SAAAT,GAAK,OACzB,yBAAKC,UAAY,aACpBD,EAAMU,QAAQC,KAAI,SAACL,EAAMM,GAAP,OACnB,kBAAC,EAAD,CAAMN,KAAMA,EAAMO,IAAKD,EAAOA,MAAOA,UCEtBE,G,MANO,SAAAd,GAAK,OAC3B,yBAAKC,UAAU,cACf,2BAAOc,KAAK,SAASC,YAAahB,EAAMgB,YAAaC,SAAUjB,EAAMkB,kBCmCtDC,E,kDAlCb,aAAc,IAAD,8BACX,gBAEKC,MAAQ,CACXV,QAAS,GACTW,UAAW,IALF,E,gEASU,IAAD,OAClBC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKC,SAAS,CAACjB,QAASgB,S,+BAKjC,IAAD,SACsBE,KAAKR,MAA3BV,EADA,EACAA,QAASW,EADT,EACSA,UACVQ,EAAoBnB,EAAQoB,QAAO,SAAAxB,GAAI,OAC3CA,EAAKC,KAAKwB,cAAcC,SAASX,EAAUY,wBAC7C,OAEI,yBAAKhC,UAAU,OACf,+CACA,kBAAC,EAAD,CAAQe,YAAY,iBAAiBE,aAAc,SAAAgB,GAAC,OAAI,EAAKP,SAAS,CAACN,UAAWa,EAAEC,OAAOC,WAC3F,kBAAC,EAAD,CAAU1B,QAAWmB,S,GA3BXQ,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3B,MAAK,SAAA4B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.fed76545.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./card-style.css\";\r\n\r\nexport const Card = props => (\r\n<div className=\"card-container\">\r\n<img alt=\"moster\" src=\"https://robohash.org/{props.mons.id}?set=set2\" height=\"150px\" width=\"150px\"/>\r\n<h1>{props.mons.name}</h1>\r\n<p>{props.mons.email}</p>\r\n</div>\r\n);\r\n\r\nexport default Card;","import React from \"react\";\r\nimport Card from \"../card-componenst/card-component.jsx\"\r\nimport \"./card-list-styles.css\"\r\n\r\nexport const CardList = props => (\r\n    <div className = \"card-list\">\r\n{props.monster.map((mons, index) =>\r\n<Card mons={mons} key={index} index={index} />)}\r\n</div>\r\n);\r\n\r\nexport default CardList;","import React from \"react\";\r\nimport \"./search-style.css\"\r\n\r\nexport const Search = props => \r\n<div className=\"search-box\">\r\n<input type=\"search\" placeholder={props.placeholder} onChange={props.handleChange}/>\r\n</div>\r\n\r\n\r\nexport default Search;","import React, { Component} from 'react';\nimport './App.css';\nimport CardList from \"./components/card-list-componensts/card-list-componensts\";\nimport Search from \"./components/search-component/search-component.jsx\";\n\nclass App extends Component {\n  constructor(){\n    super();\n\n    this.state = {\n      monster: [],\n      searchBox: \"\"\n    }\n  }\n\n    componentDidMount() {\n      fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(users => this.setState({monster: users})\n      )\n    }\n\n  \n  render() {\n    const {monster, searchBox} = this.state;\n    const filteredComponent = monster.filter(mons => \n      mons.name.toLowerCase().includes(searchBox.toLocaleLowerCase()));\n    return (\n    \n        <div className=\"App\">\n        <h1>Monster Blaster</h1>\n        <Search placeholder=\"search Monster\" handleChange={e => this.setState({searchBox: e.target.value})}/>\n        <CardList monster = {filteredComponent}/>\n        </div>\n      );\n    \n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}